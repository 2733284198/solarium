<?xml version="1.0"?>
<chapter>
    <title>Update query</title>
    <para>
        Update queries allow you to add, delete, commit, optimize and rollback commands.
        For all the details about the Solr update handler please see the Solr documentation, but some important notes:
    </para>
    <itemizedlist>
        <listitem>
            <para>
                Solr has no 'update' command. But if you add a document with a value for the 'unique key' field that already exists in the index that existing document will be overwritten by your new document.
            </para>
        </listitem>
        <listitem>
            <para>
                You can only add complete documents. If you want to update only a single field you still need to 'add' the whole document.
            </para>
        </listitem>
        <listitem>
            <para>
                Always use a database or other persistent storage as the source for building documents to add.
                Don't be tempted to emulate an update command by selecting a document, altering it and adding it.
                Almost all schemas will have fields that are indexed and not stored. You will loose the data in those fields.
            </para>
        </listitem>
        <listitem>
            <para>
                The best way to use update queries is also related to your Solr config.
                If you are for instance using the autocommit feature of Solr you probably don't want to use a commit command in your update queries.
                Make sure you are fully aware of configuration of the Solr core you are using.
            </para>
        </listitem>
    </itemizedlist>

    <sect1>
        <title>Building an update query</title>
        <para>
            An update query has options and commands.
            You can look at the commands and options as your instructions for the client classes to build an execute a request and return the correct result.
            In the following sections both the options and commands will be discussed in detail.
            You can also take a look at <ulink url="http://wiki.apache.org/solr/UpdateXmlMessages">http://wiki.apache.org/solr/UpdateXmlMessages</ulink> for more information about the underlying Solr update handler XML request format.
        </para>

        <sect2>
            <title>Options</title>

            <para>
                The update query has only two options, and it's not likely you need alter them.
                For select queries it's not uncommon to have a custom Solr handler, or a custom resultclass that maps to your models.
                But for an update query you usually just want to use the default handler and check the result.
                For this the default settings are just fine.
            </para>
            <para>However, if you do need to customize them for a special case, you can.</para>

            <sect3>
                <title>ResultClass</title>
                <para>
                    If you want to use a custom result class you can set the class name with this option. The default value is 'Solarium_Result_Update'.
                    Any custom result class should extend this class to ensure full compatibility with the client classes.
                    It is your responsibility to make sure this class is included (or available through autoloading).
                </para>
            </sect3>

            <sect3>
                <title>Handler</title>
                <para>
                    The handler is used for building the Solr URL. The default value is 'update' and it's very uncommon to need to change this.
                    But if you have a special update handler configured in your Solr core you can use this option to route update requests to this handler.
                </para>
                <para>
                    The handler value should not start or end with a slash, but may contain slashes. For instance 'admin/ping' for the ping handler is valid.
                </para>
            </sect3>

        </sect2>

        <sect2>
            <title>Commands</title>
            <para>Commands are the most important part of an update request.
                An update request may contain any combination of commands in any order.
                The commands will be added to the request in the exact order that you add them, and will be executed by Solr in exactly that order.
            </para>
            <para>
                So if you were to add a 'delete' command followed by a 'rollback' command than the delete command will have no effect. (assuming there is no autocommit on the Solr server)
            </para>

            <sect3>
                <title>Add</title>
                <para>TODO</para>
            </sect3>

            <sect3>
                <title>Delete</title>
                <para>TODO</para>
            </sect3>

            <sect3>
                <title>Commit</title>
                <para>
                    This command commits any buffered commands to the index. This buffering is done by the Solr server, depending on the configuration.
                    It's a global buffer, so a commit command might also commit commands that where buffered from a previous update request that had no commit command.
                </para>
                <para>
                    If you use the autoCommit feature on the Solr core you probably don't want to use the commit command, because that would trigger a commit in between the autoCommit interval.
                    In all other cases it makes sense to add a commit to your update (or at least to the last update request if you issue multiple) to apply your update to the Solr index.
                </para>
                <para>
                    This command command starts the commit process on the server, bit the actual commit process might take a while.
                    If your update command with a commit returns successfully this only means Solr received the commands and is processing them, the result might not be visible for a while.
                    The time this takes depends on many factors: hardware, index size, number of index segments, the commands to execute, the search load, etcetera. It can vary between milliseconds and minutes.
                </para>
                <para>
                    TODO options
                </para>
                <para>
                    TODO addCommit
                </para>
                <para>
                    TODO add commit instance
                </para>
            </sect3>

            <sect3>
                <title>Optimize</title>
                <para>TODO</para>
            </sect3>

            <sect3>
                <title>Rollback</title>
                <para>TODO</para>
            </sect3>

        </sect2>

        <sect2>
            <title>Usage modes</title>
            <para>TODO (build command and add or use one of the helper methods)</para>
        </sect2>

        <sect2>
            <title>Recommendations</title>
            <para>TODO (command order, combining same commands into a single command, don't build too big updates)</para>
        </sect2>

    </sect1>

    <sect1>
        <title>Executing an update query</title>
        <para>TODO</para>
    </sect1>

    <sect1>
        <title>The result of an update query</title>
        <para>TODO</para>
    </sect1>

    <sect1>
        <title>Summary</title>
        <para>TODO</para>
    </sect1>

</chapter>

